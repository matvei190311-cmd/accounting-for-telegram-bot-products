import json
import os
from datetime import datetime, timedelta
from aiogram import types
from config import DEFAULT_LANGUAGE

_locales_cache = {}
_available_languages = []


def load_all_locales():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ locales"""
    global _available_languages
    locales_dir = 'locales'

    if not os.path.exists(locales_dir):
        os.makedirs(locales_dir)
        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {locales_dir}")
        return

    try:
        locale_files = [f for f in os.listdir(locales_dir) if f.endswith('.json')]
        _available_languages = [f.replace('.json', '') for f in locale_files]

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —è–∑—ã–∫–∏: {', '.join(_available_languages)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        _available_languages = ['en']  # fallback


def load_locale(language=None):
    if language is None:
        language = DEFAULT_LANGUAGE

    if language in _locales_cache:
        return _locales_cache[language]

    try:
        locale_file = f'locales/{language}.json'
        if not os.path.exists(locale_file):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
            if language != 'en':
                print(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ {language}.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
                return load_locale('en')
            else:
                return {}

        with open(locale_file, 'r', encoding='utf-8') as f:
            locale_data = json.load(f)
        _locales_cache[language] = locale_data
        return locale_data
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ {language}: {e}")
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
        if language != 'en':
            return load_locale('en')
        return {}


def get_text(key, language=None, **kwargs):
    if language is None:
        language = DEFAULT_LANGUAGE

    locale = load_locale(language)
    text = locale.get(key, key)  # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if text == key and language != 'en':
        en_locale = load_locale('en')
        text = en_locale.get(key, key)

    if kwargs:
        try:
            text = text.format(**kwargs)
        except KeyError as e:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e} –≤ —Ç–µ–∫—Å—Ç–µ: {text}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")

    return text


def get_available_languages():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    if not _available_languages:
        load_all_locales()
    return _available_languages


def get_language_keyboard():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π"""
    languages_map = {
        'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'uz': "üá∫üáø O'zbek",
        'en': 'üá∫üá∏ English',
        'de': 'üá©üá™ Deutsch',
        'fr': 'üá´üá∑ Fran√ßais',
        'es': 'üá™üá∏ Espa√±ol',
        'zh': 'üá®üá≥ ‰∏≠Êñá',
        'ar': 'üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
        'tr': 'üáπüá∑ T√ºrk√ße',
        'ko': 'üá∞üá∑ ÌïúÍµ≠Ïñ¥',
        'ja': 'üáØüáµ Êó•Êú¨Ë™û'
    }

    available_langs = get_available_languages()
    keyboard_buttons = []

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π
    row = []
    for lang_code in available_langs:
        lang_name = languages_map.get(lang_code, f"üåê {lang_code.upper()}")
        row.append(lang_name)

        if len(row) == 2:
            keyboard_buttons.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        keyboard_buttons.append(row)

    return types.ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)


def format_report(vitrine, balances, transactions, start_date=None, end_date=None, language='uz'):
    if not start_date:
        start_date = datetime.now() - timedelta(days=30)
    if not end_date:
        end_date = datetime.now()

    report_texts = {
        'title': get_text('report_for_vitrine', language),
        'period': get_text('period', language),
        'given': get_text('given', language),
        'returned': get_text('returned', language),
        'taken': get_text('taken', language),
        'sold': get_text('sold', language),
        'balance': get_text('balance', language),
        'from_date': get_text('from_date', language),
        'to_date': get_text('to_date', language)
    }

    report = f"{report_texts['title']}: {vitrine.username}\n"
    report += f"{report_texts['period']}: {start_date.strftime('%d.%m.%Y')} {report_texts['from_date']} - {end_date.strftime('%d.%m.%Y')} {report_texts['to_date']}\n\n"

    for balance in balances:
        product = balance.product
        product_transactions = [t for t in transactions if t.product_id == product.id]

        given = sum(t.quantity for t in product_transactions if t.type == 'give' and t.status == 'confirmed')
        returned = sum(t.quantity for t in product_transactions if t.type == 'return' and t.status == 'confirmed')
        taken = sum(t.quantity for t in product_transactions if t.type == 'take' and t.status == 'confirmed')
        sold = sum(t.quantity for t in product_transactions if t.type == 'sale' and t.status == 'confirmed')

        report += f"üì¶ {product.sku} - {product.name}\n"
        report += f"  {report_texts['given']}: {given}\n"
        report += f"  {report_texts['returned']}: {returned}\n"
        report += f"  {report_texts['taken']}: {taken}\n"
        report += f"  {report_texts['sold']}: {sold}\n"
        report += f"  {report_texts['balance']}: {balance.quantity}\n\n"

    return report


def split_message(text, max_length=4000):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]

    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break

        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = text.rfind(' ', 0, max_length)
        if split_pos == -1:
            split_pos = max_length

        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()

    return parts


async def safe_send_message(bot, chat_id, text, reply_markup=None, max_length=4000):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        chat = await bot.get_chat(chat_id)
        if chat:
            if len(text) > max_length:
                parts = split_message(text, max_length)
                for part in parts:
                    await bot.send_message(chat_id, part, reply_markup=reply_markup)
                    reply_markup = None
            else:
                await bot.send_message(chat_id, text, reply_markup=reply_markup)
            return True
    except Exception as e:
        print(f"‚ùå {get_text('message_send_error', 'en')} {chat_id}: {e}")
        return False
    return False


# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_all_locales()