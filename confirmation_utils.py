from aiogram import types
from database import Database, Transaction, Balance, User
from keyboards import get_confirmation_reply_keyboard
from utils import safe_send_message, get_text
from config import ADMIN_IDS
from logger import log_operation, log_error

db = Database('sqlite:///bot.db')


def get_session():
    return db.get_session()


async def update_balances(transaction, session):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        if transaction.type == 'give':
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            balance = session.query(Balance).filter_by(
                vitrine_id=transaction.to_vitrine_id,
                product_id=transaction.product_id
            ).first()

            if not balance:
                balance = Balance(
                    vitrine_id=transaction.to_vitrine_id,
                    product_id=transaction.product_id,
                    quantity=transaction.quantity
                )
                session.add(balance)
            else:
                balance.quantity += transaction.quantity

        elif transaction.type == 'return':
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –≤–∏—Ç—Ä–∏–Ω—ã
            balance = session.query(Balance).filter_by(
                vitrine_id=transaction.from_vitrine_id,
                product_id=transaction.product_id
            ).first()

            if balance and balance.quantity >= transaction.quantity:
                balance.quantity -= transaction.quantity
            else:
                raise Exception(get_text('not_enough_products', 'en'))

        elif transaction.type == 'transfer':
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            from_balance = session.query(Balance).filter_by(
                vitrine_id=transaction.from_vitrine_id,
                product_id=transaction.product_id
            ).first()

            if not from_balance or from_balance.quantity < transaction.quantity:
                raise Exception(get_text('not_enough_products', 'en'))

            from_balance.quantity -= transaction.quantity

            to_balance = session.query(Balance).filter_by(
                vitrine_id=transaction.to_vitrine_id,
                product_id=transaction.product_id
            ).first()

            if not to_balance:
                to_balance = Balance(
                    vitrine_id=transaction.to_vitrine_id,
                    product_id=transaction.product_id,
                    quantity=transaction.quantity
                )
                session.add(to_balance)
            else:
                to_balance.quantity += transaction.quantity

        session.commit()

    except Exception as e:
        session.rollback()
        raise e


async def send_confirmation_request(transaction_id, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
    session = get_session()
    try:
        transaction = session.query(Transaction).get(transaction_id)
        if not transaction:
            print(f"‚ùå {get_text('transaction_not_found', 'en')} {transaction_id}")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if transaction.type == 'give':
            target_user = transaction.to_vitrine
        elif transaction.type == 'return':
            # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if transaction.admin_id:
                target_user = session.query(User).get(transaction.admin_id)
            else:
                # –ï—Å–ª–∏ admin_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                target_user = session.query(User).filter_by(role='admin').first()
                if target_user:
                    transaction.admin_id = target_user.id
                    session.commit()
        elif transaction.type == 'transfer':
            target_user = transaction.to_vitrine
        else:
            return True

        if not target_user:
            print(f"‚ùå {get_text('target_user_not_found', 'en')} {transaction_id}")
            return False

        message_text = format_confirmation_message(transaction, target_user.language)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        success = await safe_send_message(
            bot,
            target_user.telegram_id,
            message_text,
            reply_markup=get_confirmation_reply_keyboard(transaction_id, target_user.language)
        )

        if success:
            transaction.needs_confirmation = True
            session.commit()
            print(
                f"‚úÖ {get_text('confirmation_request_sent', 'en')} {target_user.username} (ID: {target_user.telegram_id})")
            return True
        else:
            print(f"‚ùå {get_text('confirmation_send_error', 'en')} {target_user.telegram_id}")
            return False

    except Exception as e:
        print(f"‚ùå {get_text('confirmation_error', 'en')}: {e}")
        session.rollback()
        return False
    finally:
        session.close()


def format_confirmation_message(transaction, language='en'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    product = transaction.product

    if transaction.type == 'give':
        from_user = transaction.admin
        message = (
            f"üì¶ {get_text('give_request_title', language)}\n\n"
            f"{get_text('admin', language)} {from_user.username} {get_text('sending_product', language)}:\n"
            f"üì¶ {get_text('product', language)}: {product.name}\n"
            f"üî¢ {get_text('quantity', language)}: {transaction.quantity} {get_text('pcs', language)}\n\n"
            f"{get_text('confirm_receipt', language)}:"
        )

    elif transaction.type == 'return':
        from_user = transaction.from_vitrine
        message = (
            f"üîÑ {get_text('return_request_title', language)}\n\n"
            f"{get_text('vitrines', language)} {from_user.username} {get_text('returning_product', language)}:\n"
            f"üì¶ {get_text('product', language)}: {product.name}\n"
            f"üî¢ {get_text('quantity', language)}: {transaction.quantity} {get_text('pcs', language)}\n\n"
            f"{get_text('confirm_return', language)}:"
        )

    elif transaction.type == 'transfer':
        from_user = transaction.from_vitrine
        message = (
            f"üîÑ {get_text('transfer_request_title', language)}\n\n"
            f"{get_text('product_transfer_from', language)} {from_user.username} {get_text('to_you', language)}:\n"
            f"üì¶ {get_text('product', language)}: {product.name}\n"
            f"üî¢ {get_text('quantity', language)}: {transaction.quantity} {get_text('pcs', language)}\n\n"
            f"{get_text('confirm_receipt', language)}:"
        )

    return message


async def process_confirmation_reply(message: types.Message, confirm: bool, transaction_id: int = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ reply-–∫–Ω–æ–ø–æ–∫"""
    session = get_session()
    try:
        # –ï—Å–ª–∏ transaction_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if transaction_id is None:
            text = message.text
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ _)
            try:
                transaction_id = int(text.split("_")[-1])
            except (IndexError, ValueError):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}")
                return False

        transaction = session.query(Transaction).get(transaction_id)
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        user_language = user.language if user else 'en'

        if not transaction or transaction.status != 'pending':
            await message.answer(get_text('already_processed', user_language))
            return True

        if confirm:
            transaction.status = 'confirmed'
            transaction.confirmed_by = user.id
            await update_balances(transaction, session)
            await send_confirmation_notification(transaction, True, message.bot)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            log_operation(transaction.id, f'{transaction.type}_confirmed',
                          f"{get_text('confirmed_by_user', 'en')} {user.username}")

            await message.answer(get_text('operation_confirmed', user_language),
                                 reply_markup=types.ReplyKeyboardRemove())
        else:
            transaction.status = 'rejected'
            await send_confirmation_notification(transaction, False, message.bot)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            log_operation(transaction.id, f'{transaction.type}_rejected',
                          f"{get_text('rejected_by_user', 'en')} {user.username}")

            await message.answer(get_text('operation_rejected', user_language),
                                 reply_markup=types.ReplyKeyboardRemove())

        session.commit()
        return True

    except Exception as e:
        log_error('confirmation_processing', str(e), message.from_user.id)
        print(f"‚ùå {get_text('confirmation_processing_error', 'en')}: {e}")
        session.rollback()
        await message.answer(get_text('error_occurred', 'en'), reply_markup=types.ReplyKeyboardRemove())
        return False
    finally:
        session.close()


async def send_confirmation_notification(transaction, confirmed, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    try:
        session = get_session()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if transaction.type == 'give':
            target_user = transaction.admin
            if confirmed:
                message_key = 'give_confirmed_notification'
            else:
                message_key = 'give_rejected_notification'

        elif transaction.type == 'return':
            target_user = transaction.from_vitrine
            if confirmed:
                message_key = 'return_confirmed_notification'
            else:
                message_key = 'return_rejected_notification'

        elif transaction.type == 'transfer':
            target_user = transaction.from_vitrine
            if confirmed:
                message_key = 'transfer_confirmed_notification'
            else:
                message_key = 'transfer_rejected_notification'
        else:
            session.close()
            return

        if target_user:
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_language = target_user.language if target_user.language else 'en'

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
            product_info = f"\nüì¶ {transaction.product.name} - {transaction.quantity} {get_text('pcs', user_language)}"

            if confirmed:
                status_emoji = "‚úÖ"
                base_message = get_text(message_key, user_language)
            else:
                status_emoji = "‚ùå"
                base_message = get_text(message_key, user_language)

            message = f"{status_emoji} {base_message}{product_info}"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await safe_send_message(bot, target_user.telegram_id, message)

        session.close()

    except Exception as e:
        print(f"‚ùå {get_text('notification_send_error', 'en')}: {e}")