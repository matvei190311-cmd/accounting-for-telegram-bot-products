from aiogram import types
from database import Database, Transaction, Balance, User
from keyboards import get_confirmation_reply_keyboard
from utils import safe_send_message
from config import ADMIN_IDS
from logger import log_operation, log_error

db = Database('sqlite:///bot.db')


def get_session():
    return db.get_session()


async def send_confirmation_request(transaction_id, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
    session = get_session()
    try:
        transaction = session.query(Transaction)    .get(transaction_id)
        if not transaction:
            print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if transaction.type == 'give':
            target_user = transaction.to_vitrine
            operation_type = "–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        elif transaction.type == 'return':
            # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if transaction.admin_id:
                target_user = session.query(User).get(transaction.admin_id)
            else:
                # –ï—Å–ª–∏ admin_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                target_user = session.query(User).filter_by(role='admin').first()
                if target_user:
                    transaction.admin_id = target_user.id
                    session.commit()
            operation_type = "–≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞"
        elif transaction.type == 'transfer':
            target_user = transaction.to_vitrine
            operation_type = "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        else:
            return True

        if not target_user:
            print(f"‚ùå –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
            return False

        message_text = format_confirmation_message(transaction, operation_type, target_user.language)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        success = await safe_send_message(
            bot,
            target_user.telegram_id,
            message_text,
            reply_markup=get_confirmation_reply_keyboard(transaction_id, target_user.language)
        )

        if success:
            transaction.needs_confirmation = True
            session.commit()
            print(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.username} (ID: {target_user.telegram_id})")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.telegram_id}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        session.rollback()
        return False
    finally:
        session.close()


def format_confirmation_message(transaction, operation_type, language='uz'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    product = transaction.product

    if transaction.type == 'give':
        from_user = transaction.admin
        if language == 'ru':
            message = (
                f"üì¶ –ó–ê–ü–†–û–° –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–í–ê–†–ê\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {from_user.username} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Ç–æ–≤–∞—Ä:\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {transaction.quantity} —à—Ç.\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:"
            )
        else:
            message = (
                f"üì¶ MAHSULOT OLISH SO'ROVI\n\n"
                f"Administrator {from_user.username} sizga mahsulot yubormoqda:\n"
                f"üì¶ Mahsulot: {product.name}\n"
                f"üî¢ Miqdor: {transaction.quantity} dona\n\n"
                f"Olishni tasdiqlang:"
            )

    elif transaction.type == 'return':
        from_user = transaction.from_vitrine
        if language == 'ru':
            message = (
                f"üîÑ –ó–ê–ü–†–û–° –ù–ê –í–û–ó–í–†–ê–¢ –¢–û–í–ê–†–ê\n\n"
                f"–í–∏—Ç—Ä–∏–Ω–∞ {from_user.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä:\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {transaction.quantity} —à—Ç.\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç:"
            )
        else:
            message = (
                f"üîÑ MAHSULOT QAYTARISH SO'ROVI\n\n"
                f"Vitrina {from_user.username} mahsulotni qaytarmoqda:\n"
                f"üì¶ Mahsulot: {product.name}\n"
                f"üî¢ Miqdor: {transaction.quantity} dona\n\n"
                f"Qaytarishni tasdiqlang:"
            )

    elif transaction.type == 'transfer':
        from_user = transaction.from_vitrine
        if language == 'ru':
            message = (
                f"üîÑ –ó–ê–ü–†–û–° –ù–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –¢–û–í–ê–†–ê\n\n"
                f"–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –æ—Ç {from_user.username} –∫ –≤–∞–º:\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {transaction.quantity} —à—Ç.\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:"
            )
        else:
            message = (
                f"üîÑ MAHSULOT KO'CHIRISH SO'ROVI\n\n"
                f"Mahsulot {from_user.username} dan sizga ko'chirilmoqda:\n"
                f"üì¶ Mahsulot: {product.name}\n"
                f"üî¢ Miqdor: {transaction.quantity} dona\n\n"
                f"Olishni tasdiqlang:"
            )

    return message


async def process_confirmation_reply(message: types.Message, confirm: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ reply-–∫–Ω–æ–ø–æ–∫"""
    session = get_session()
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        text = message.text
        if "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å_" in text or "‚úÖ Tasdiqlash_" in text:
            transaction_id = int(text.split("_")[1])
        elif "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å_" in text or "‚ùå Rad etish_" in text:
            transaction_id = int(text.split("_")[1])
        else:
            return False

        transaction = session.query(Transaction).get(transaction_id)
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

        if not transaction or transaction.status != 'pending':
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            return True

        if confirm:
            transaction.status = 'confirmed'
            transaction.confirmed_by = user.id
            await update_balances(transaction, session)
            await send_confirmation_notification(transaction, True, message.bot)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            log_operation(transaction.id, f'{transaction.type}_confirmed',
                          f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")

            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        else:
            transaction.status = 'rejected'
            await send_confirmation_notification(transaction, False, message.bot)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            log_operation(transaction.id, f'{transaction.type}_rejected',
                          f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")

            await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())

        session.commit()
        return True

    except Exception as e:
        log_error('confirmation_processing', str(e), message.from_user.id)
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        session.rollback()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=types.ReplyKeyboardRemove())
        return False
    finally:
        session.close()


async def send_confirmation_notification(transaction, confirmed, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        if transaction.type == 'give':
            target_user = transaction.admin
            if confirmed:
                message = f"‚úÖ –í–∏—Ç—Ä–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."
            else:
                message = f"‚ùå –í–∏—Ç—Ä–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."

        elif transaction.type == 'return':
            target_user = transaction.from_vitrine
            if confirmed:
                message = f"‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."
            else:
                message = f"‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."

        elif transaction.type == 'transfer':
            target_user = transaction.from_vitrine
            if confirmed:
                message = f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."
            else:
                message = f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{transaction.product.name} - {transaction.quantity} —à—Ç."

        if target_user:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await safe_send_message(bot, target_user.telegram_id, message)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

