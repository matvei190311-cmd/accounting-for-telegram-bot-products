import logging
import os
from datetime import datetime
from database import Database

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
operations_logger = logging.getLogger('operations')
operations_logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
file_handler = logging.FileHandler(f'logs/operations_{datetime.now().strftime("%Y%m")}.log', encoding='utf-8')
file_handler.setFormatter(formatter)
operations_logger.addHandler(file_handler)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
error_logger = logging.getLogger('errors')
error_logger.setLevel(logging.ERROR)
error_file_handler = logging.FileHandler(f'logs/errors_{datetime.now().strftime("%Y%m")}.log', encoding='utf-8')
error_file_handler.setFormatter(formatter)
error_logger.addHandler(error_file_handler)

db = Database('sqlite:///bot.db')


def log_operation(transaction_id, operation_type, details):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
    session = db.get_session()
    try:
        transaction = session.query(Transaction).get(transaction_id)
        if not transaction:
            operations_logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {transaction_id}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        product_name = transaction.product.name if transaction.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"

        log_message = f"OPERATION: {operation_type.upper()} | "
        log_message += f"ID: {transaction_id} | "
        log_message += f"Product: {product_name} | "
        log_message += f"Quantity: {transaction.quantity} | "
        log_message += f"Status: {transaction.status} | "

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if operation_type == 'give' and transaction.to_vitrine:
            log_message += f"To: {transaction.to_vitrine.username} | "
        elif operation_type in ['return', 'sale', 'take'] and transaction.from_vitrine:
            log_message += f"From: {transaction.from_vitrine.username} | "
        elif operation_type == 'transfer':
            if transaction.from_vitrine:
                log_message += f"From: {transaction.from_vitrine.username} | "
            if transaction.to_vitrine:
                log_message += f"To: {transaction.to_vitrine.username} | "

        if transaction.admin:
            log_message += f"Admin: {transaction.admin.username} | "

        log_message += f"Details: {details}"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
        operations_logger.info(log_message)
        print(f"üìù LOGGED: {log_message}")

    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        session.close()


def log_error(operation_type, error_message, user_id=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    error_msg = f"ERROR: {operation_type} | User: {user_id} | Message: {error_message}"
    error_logger.error(error_msg)
    print(f"‚ùå ERROR LOGGED: {error_msg}")


def get_operations_log(limit=100):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    try:
        log_file = f'logs/operations_{datetime.now().strftime("%Y%m")}.log'
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                return lines[-limit:] if len(lines) > limit else lines
        return []
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
        return []


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from database import Transaction